2017/8/23
（1） ssh 网络传输协议，加密：相对安全，压缩：速度较快。
（2）man ssh 查看ssh文档资料
（3）Python库 ConfigParser
（4）paramiko/Fabric 可实现SSH，实现文件上传下载
（5）协程：看作是一种用户空间的线程，操作系统对其存在一无所知，需要用户自己去做调度。(gevent)

正则、python进阶、excel...

2017/8/26
(1) 让redis在后台运行:sudo vim redis.conf(在redis安装根目录)
    修改：daemonize yes
    重启redis（加载刚才修改的配置文件启动）：src/redis-server redis.conf
#-----
# By default Redis does not run as a daemon. Use 'yes' if you need it.
# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.
  daemonize yes
#-----

(2) supervisor
给我们自己开发的应用程序编写一个配置文件，让supervisor来管理它。
每个进程的配置文件都可以单独分拆，放在/etc/supervisor/conf.d/目录下，以.conf作为扩展名。
例如，app.conf定义了一个gunicorn的进程：

[program:app]
command=/usr/bin/gunicorn -w 1 wsgiapp:application
directory=/srv/www
user=www-data

进程app定义在[program:app]中，command是命令，directory是进程的当前目录，user是进程运行的用户身份。
重启supervisor，让配置文件生效: service supervisor restart/ supervisorctl update
然后运行命令supervisorctl启动进程：
# supervisorctl start app
停止进程：
# supervisorctl stop app
# 查看进程: ps -aux|grep supervisor

(3) 查看log: /var/log


2017/8/27
（1）ubuntu关闭防火墙：service ufw stop
（2）搭建：uwsgi+nginx+django 环境  blog：http://www.linuxidc.com/Linux/2017-03/141785.htm
流程原理分析：
首先客户端请求服务资源，
nginx作为直接对外的服务接口,接收到客户端发送过来的http请求,会解包、分析，
如果是静态文件请求就根据nginx配置的静态文件目录，返回请求的资源，
如果是动态的请求,nginx就通过配置文件,将请求传递给uWSGI；uWSGI 将接收到的包进行处理，并转发给wsgi，
wsgi根据请求调用django工程的某个文件或函数，处理完后django将返回值交给wsgi，
wsgi将返回值进行打包，转发给uWSGI，
uWSGI接收后转发给nginx,nginx最终将返回值返回给客户端(如浏览器)。
*注:不同的组件之间传递信息涉及到数据格式和协议的转换
作用:
1. 第一级的nginx并不是必须的，uwsgi完全可以完成整个的和浏览器交互的流程；
2. 在nginx上加上安全性或其他的限制，可以达到保护程序的作用；
3. uWSGI本身是内网接口，开启多个work和processes可能也不够用，而nginx可以代理多台uWSGI完成uWSGI的负载均衡；
4. django在debug=False下对静态文件的处理能力不是很好，而用nginx来处理更加高效。

nginx 处理静态文件需要先收集静态文件放到独立文件夹，以供nginx使用：
1、 django setting.py设置: STATIC_ROOT = '/static'  # 路径文Linux文件系统路径
2、 设置完后执行python mange.py collectstatic  # cd /static可以查看文件

